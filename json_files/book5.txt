{"1": "There comes situations in real life when we need to make some decisions and based on these decisions, we decide what should we do next. Similar situations arises in programming also where we need to make some decisions and based on these decision we will execute the next block of code.", "2": "Decision making statements in programming languages decides the direction of flow of program execution. Decision making statements available in C++ are:", "3": "if statement", "4": "if statement is the most simple decision making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.", "5": "Syntax:", "6": "if", "7": "(condition){", "8": "// Statements to execute if", "9": "// condition is true}", "10": "Here,conditionafter evaluation will be either true or false. if statement accepts boolean values \u2013 if the value is true then it will execute the block of statements below it otherwise not.If we do not provide the curly braces \u2018{\u2018 and \u2018}\u2019 after if( condition ) then by default if statement will consider the first immediately below statement to be inside its block.", "11": "Flowchart:", "12": "// C++ program to illustrate If statement", "13": "#include<iostream>", "14": "using namespace std;", "15": " int main(){", "16": " int i = 10;", "17": " if (i > 15){ ", "18": "cout<<\"10 is less than 15\";}", "19": " cout<<\"I am Not in if\";}", "20": " output:", "21": " I am Not in if", "22": "As the condition present in the if statement is false. So, the block below the if statement is not executed.", "23": "The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won\u2019t. But what if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false.", "24": "Syntax:", "25": "if", "26": "(condition){", "27": " // Executes this block if>", "28": "// condition is true }", "29": "else{", "30": " // Executes this block if", "31": " // condition is false }", "32": " Flowchart:", "33": "Example:", "34": "// C++ program to illustrate if-else statement ", "35": "#include<iostream>", "36": "using namespace std; ", "37": "int main(){", "38": "int i = 20;", "39": " if (i < 15) ", "40": "cout<<\"i is smaller than 15\";", "41": " else", "42": "cout<<\"i is greater than 15\";", "43": " return 0; }", "44": "Output:", "45": "i is greater than 15", "46": "The block of code following the else statement is executed as the condition present in the if statement is false", "47": "A nested if is an if statement that is the target of another if statement. Nested if statements means an if statement inside another if statement. Yes, C++ allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement.", "48": "Syntax:", "49": "if (condition1) {", "50": " // Executes when condition1 is true if (condition2)  {", "51": "// Executes when condition2 is true } }", "52": "Flowchart:", "53": " Example:", "54": "// C++ program to illustrate nested-if statement", "55": "int main() {", "56": "  int i = 10;", "57": "if (i == 10) {", "58": "// First if statement", "59": "if (i < 15)", "60": "cout<<\"i is smaller than 15\";", "61": "// Nested - if statement", "62": " // Will only be executed if statement above", "63": " // it is true", "64": "if (i < 12)", "65": "  cout<<\"i is smaller than 12 too\"; ", "66": "else", "67": "cout<<\"i is greater than 15\"; }", "68": "  return 0; }", "69": "Output:", "70": "i is smaller than 15", "71": "i is smaller than 12 too", "72": "if else if statement", "73": " Here, a user can decide among multiple options. The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed.", "74": "Syntax:", "75": "if ", "76": "(condition)", "77": " statement;", "78": "else if", "79": "(condition)", "80": " statement;", "81": "else", "82": " statement;", "83": "Example:", "84": "// C++ program to illustrate", "85": "if-else-if ladder", "86": "#include<iostream> ", "87": "using namespace std; ", "88": "int main(){", "89": " int i = 20;", "90": "if (i == 10)", "91": " cout<<\"i is 10\";", "92": "else if (i == 15)", "93": " cout<<\"i is 15\";", "94": "else if (i == 20)", "95": "cout<<\"i is 20\";", "96": " else cout<<\"i is not present\";}", "97": "Output:", "98": "i is 20", "99": "switch statement>", "100": " Switch case statements are a substitute for long if statements that compare a variable to several integral values", "101": "The switch statement is a multiway branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression.", "102": "Switch is a control statement that allows a value to change control of execution.", "103": "Syntax:", "104": "switch (n) {", "105": "case 1: // code to be executed if n = 1;", "106": " break;", "107": "case 2: // code to be executed if n = 2;", "108": " break;", "109": " default: // code to be executed if n doesn t match any cases ; break; }", "110": "Important Points about Switch Case Statements:", "111": "The expression provided in the switch should result in a constant value otherwise it would not be valid.", "112": "Duplicate case values are not allowed.", "113": "The default statement is optional.Even if the switch case statement do not have a default statement,it would run without any problem.", "114": "The break statement is used inside the switch to terminate a statement sequence. When a break statement is reached, the switch terminates, and the flow of control jumps to the next line following the switch statement.", "115": "The break statement is optional. If omitted, execution will continue on into the next case. The flow of control will fall through to subsequent cases until a break is reached.", "116": "Nesting of switch statements are allowed, which means you can have switch statements inside another switch. However nested switch statements should be avoided as it makes program more complex and less readable.", "117": " Example:", "118": "// Following is a simple program to demonstrate ", "119": "// syntax of switch.", "120": "#include <stdio.h>", "121": "int main(){", "122": "int x = 2;", "123": "switch (x) { ", "124": " case 1: printf(\"Choice is 1\");  ", "125": " break;", "126": " case 2: printf(\"Choice is 2\");", "127": "  break;", "128": " case 3: printf(\"Choice is 3\");  ", "129": " break;  ", "130": " default: printf(\"Choice other than 1, 2 and 3\"); ", "131": " break; } ", "132": " return 0; }", "133": "Output:", "134": "Choice is 2"}